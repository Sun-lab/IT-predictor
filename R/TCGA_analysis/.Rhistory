(HeightC + HeightCSq + AgeC):(Male + Female + Smoker),
data=fev)
summary(model.repara)
growthrate = exp(log(2)/30)
1e5*growthrate^(1000-970)
library(data.table)
library(R.utils)
TCGAfolder = "../../TCGA/"
datafolder = paste0(TCGAfolder,"SKCM/gdc_download_20201012_225902.677830/")
sampleinfo = read.table(paste0(TCGAfolder,"SKCM/gdc_sample_sheet.2020-10-12.tsv"), header = TRUE, sep = "\t", as.is = TRUE)
head(sampleinfo)
# data category: Transcriptome Profiling
# data type: Gene Expression Quantification
# Project ID: TCGA-SKCM
# Case ID: 468 case ID, not unique for all samples
# Sample ID: 472 sample ID, unique for all samples
# Sample type: "Metastatic", "Primary Tumor", "Additional Metastatic", "Solid Tissue Normal"
geneinfo = fread(paste0(TCGAfolder, "gencode.v22.genes.txt"), header = TRUE, sep = "\t", drop = 8)
head(geneinfo)
str(geneinfo)
#
load(paste0(TCGAfolder,"Gene_Lengths.RData"))
head(GeneLengths.Mat)
str(GeneLengths.Mat)
head(sampleinfo)
f = sampleinfo$File.ID
paste0(datafolder,f)
paste0(datafolder,sampleinfo$File.ID, sampleinfo$File.Name)
paste0(datafolder,sampleinfo$File.ID, "/",sampleinfo$File.Name)
countlist = lapply(countfiles, fread)
countfiles = paste0(datafolder,sampleinfo$File.ID, "/",sampleinfo$File.Name)
countlist = lapply(countfiles, fread)
str(countlist)
countlist[[1]]
rm(countlist)
f
f = countfiles[1]
f
cf = fread(f)
cf
gene.id = c()
cf = fread(f, col.names = c(ensembl.ID, counts))
cf = fread(f, col.names = c("ensembl.ID", "counts"))
cf$ensembl.ID
is.na(gene.id)
is_empty(gene.id)
gene.id = NA
is.na(gene.id)
cat("wrong ensembl id in ", f)
count.matrix = data.frame(0)
View(count.matrix)
count.matrix = data.frame(NA)
View(count.matrix)
vector()
numeric()
length(countfiles)
countlist = data.frame(matrix(numeric(), NA, length(countfiles),
dimnames=list(c(), sampleinfo$Sample.ID)))
countlist = data.frame(matrix(numeric(), 0, length(countfiles),
dimnames=list(c(), sampleinfo$Sample.ID)))
countlist
rm(countlist)
count.df = data.frame(matrix(numeric(), 0, length(countfiles),
dimnames=list(c(), sampleinfo$Sample.ID)))
str(count.df)
cf$counts
count.df$TCGA.D3.A8GB.06A
count.df[[TCGA.D3.A8GB.06A]]
count.df[TCGA.D3.A8GB.06A]
count.df["TCGA.D3.A8GB.06A"]
count.df[["TCGA.D3.A8GB.06A"]]
match(f,countfiles)
sampleinfo$Sample.ID[match(f,countfiles)]
count.df[[sampleinfo$Sample.ID[match(f,countfiles)]]]
sampleinfo$Sample.ID[match(f,countfiles)]
count.df[sampleinfo$Sample.ID[match(f,countfiles)]]
count.df[paste(sampleinfo$Sample.ID[match(f,countfiles)])]
count.df[paste0(sampleinfo$Sample.ID[match(f,countfiles)])]
count.df[[paste0(sampleinfo$Sample.ID[match(f,countfiles)])]]
count.df[[sampleinfo$Sample.ID[match(f,countfiles)]]]
count.df[["TCGA-D3-A8GB-06A"]]
count.df["TCGA-D3-A8GB-06A"]
count.df[[colnames(count.df)[match(f,countfiles)]]]
all(gene.id == cf$ensembl.ID)
gene.id = cf$ensembl.ID
all(gene.id == cf$ensembl.ID)
count.df[[colnames(count.df)[match(f,countfiles)]]] = cf$counts
cf$counts
count.df = data.frame(matrix(numeric(), , length(countfiles),
dimnames=list(c(), sampleinfo$Sample.ID)))
count.df[[colnames(count.df)[match(f,countfiles)]]] = cf$counts
colnames(count.df)[match(f,countfiles)]
count.df[,colnames(count.df)[match(f,countfiles)]]
count.df[,colnames(count.df)[match(f,countfiles)]] = cf$counts
count.df[1:length(cf$counts),colnames(count.df)[match(f,countfiles)]] = cf$counts
count.df[1:3,1:3]
f
f=countfiles[2]
f
cf = fread(f, col.names = c("ensembl.ID", "counts"))
cf = fread(f, col.names = c("ensembl.ID", "counts"))
setwd("~/Documents/GitHub/IT-predictor/R/TCGA_analysis")
cf = fread(f, col.names = c("ensembl.ID", "counts"))
is.na(gene.id)
anyNA(NA)
anyNA(gene.id)
all(gene.id == cf$ensembl.ID)
count.df[1:length(cf$counts),colnames(count.df)[match(f,countfiles)]] = cf$counts
count.df[1:3,1:3]
gene.id = NA
count.df = data.frame(matrix(numeric(), , length(countfiles),
dimnames=list(c(), sampleinfo$Sample.ID)))
for (f in countfiles) {
cf = fread(f, col.names = c("ensembl.ID", "counts"))
if (anyNA(gene.id)){
gene.id = cf$ensembl.ID
count.df[1:length(cf$counts),colnames(count.df)[match(f,countfiles)]] = cf$counts
} else {
if (all(gene.id == cf$ensembl.ID)){
count.df[1:length(cf$counts),colnames(count.df)[match(f,countfiles)]] = cf$counts
} else {
cat("wrong ensembl id in ", f)
next
}
}
}
for (i in 1:3) {
cat(i)
}
for (i in 1:3) {
cat("loop ", i, "\n")
}
rm
rm(count.matrix)
count.df[1:5,1:5]
rownames(count.df) = gene.id
count.df[1:5,1:5]
anyNA(count.df)
x = c(1,2,3)
y = c(1,3,2)
x == y
all(x ==y)
geneinfo$geneId
match(gene.id,geneinfo$geneId)
anyNA(match(gene.id,geneinfo$geneId))
which(is.na(match(gene.id,geneinfo$geneId)))
geneinfo$hgnc_symbol[match(gene.id,geneinfo$geneId)]
gene.names = geneinfo$hgnc_symbol[match(gene.id,geneinfo$geneId)]
na.omit(match(gene.id,geneinfo$geneId))
count.df = count.df[na.omit(match(gene.id,geneinfo$geneId)),]
match(rownames(count.df),geneinfo$geneId)
anyNA(match(rownames(count.df),geneinfo$geneId))
gene.names = geneinfo$hgnc_symbol[match(rownames(count.df),geneinfo$geneId)]
row.names(count.df) = gene.names
rownames(count.df)
length(unique(rownames(count.df)))
length(unique(gene.names))
length(unique(match(rownames(count.df),geneinfo$geneId)))
length(unique(geneinfo$hgnc_symbol))
duplicated(geneinfo$hgnc_symbol)
which(geneinfo$hgnc_symbol)
which(duplicated(geneinfo$hgnc_symbol))
geneinfo$hgnc_symbol[which(duplicated(geneinfo$hgnc_symbol))]
geneinfo$hgnc_symbol[1223]
geneinfo[1223,]
anyNA(geneinfo$hgnc_symbol)
#
which(is.na(geneinfo$hgnc_symbol))
head(GeneLengths.Mat)
geneinfo[5304,]
geneinfo[1223,]
datatable.na.strings
getOption(datatable.na.strings)
getOption("datatable.na.strings")
# Info matrix on the genes
geneinfo = fread(paste0(TCGAfolder, "gencode.v22.genes.txt"), header = TRUE, sep = "\t", drop = 8, na.strings = c("NA", ""))
head(geneinfo)
# Some ensembl ID are missing hgnc_symbol
missing.id = which(is.na(geneinfo$hgnc_symbol))
geneinfo = geneinfo[-missing.id,]
anyNA(geneinfo$hgnc_symbol)
geneinfo$hgnc_symbol
which(geneinfo$hgnc_symbol == "")
which(geneinfo$hgnc_symbol == " ")
match(rownames(count.df),geneinfo$geneId)
which(is.na(rownames(count.df),geneinfo$geneId)))
which(is.na(rownames(count.df),geneinfo$geneId))
which(is.na(match(rownames(count.df),geneinfo$geneId)))
row.names(count.df)
gene.id = row.names(count.df)
count.df = count.df[-missing.id,]
countfiles = paste0(datafolder,sampleinfo$File.ID, "/",sampleinfo$File.Name)
gene.id = NA
count.df = data.frame(matrix(numeric(), 0, length(countfiles),
dimnames=list(c(), sampleinfo$Sample.ID)))
for (f in countfiles) {
cf = fread(f, col.names = c("ensembl.ID", "counts"))
if (anyNA(gene.id)){
gene.id = cf$ensembl.ID
count.df[1:length(cf$counts),colnames(count.df)[match(f,countfiles)]] = cf$counts
} else {
if (all(gene.id == cf$ensembl.ID)){
count.df[1:length(cf$counts),colnames(count.df)[match(f,countfiles)]] = cf$counts
} else {
cat("wrong ensembl id in ", f, "\n")
next
}
}
}
rownames(count.df) = gene.id
count.df[1:5,1:5]
# sanity check
anyNA(count.df)
gene.names = geneinfo$hgnc_symbol[na.omit(match(gene.id,geneinfo$geneId))]
count.df.filtered = count.df[na.omit(match(gene.id,geneinfo$geneId)),]
rm(cf)
all(gene.names == geneinfo$hgnc_symbol)
anyNA(match(gene.id,geneinfo$geneId))
# the ensembl ID is unique, but gene names is not
which(duplicated(geneinfo$hgnc_symbol))
# Some ensembl ID have duplicated hgnc symbols
geneinfo[which(duplicated(geneinfo$hgnc_symbol)),]
geneinfo[geneinfo$hgnc_symbol == "RNU6-443P;RNU6-771P", ]
# Some ensembl ID have duplicated hgnc symbols
geneinfo[which(duplicated(geneinfo$hgnc_symbol)),]
geneinfo[geneinfo$hgnc_symbol == "TBC1D26", ]
# Info matrix on the genes
geneinfo = fread(paste0(TCGAfolder, "gencode.v22.genes.txt"), header = TRUE, sep = "\t", drop = 8, na.strings = c("NA", ""))
head(geneinfo)
geneinfo.nomissing = geneinfo[-missing.id,]
# save the raw matrix of count
write.csv(count.df, "raw_counts.csv", quote = FALSE, row.names = TRUE, col.names = TRUE)
# save the raw matrix of count
write.csv(count.df, "raw_counts.csv")
rm(geneinfo.nomissing)
# Some ensembl ID have duplicated hgnc symbols
duplicated.id = which(duplicated(geneinfo$hgnc_symbol))
# Some ensembl ID have duplicated hgnc symbols
duplicated.id = which(duplicated(geneinfo$hgnc_symbol))
duplicated.id
geneinfo.nomissing = geneinfo[-missing.id,]
# Some ensembl ID have duplicated hgnc symbols
duplicated.id = which(duplicated(geneinfo.nomissing$hgnc_symbol))
duplicated.id
geneinfo.filtered = geneinfo.nomissing[-duplicated.id,]
rm(geneinfo.nomissing)
match(gene.id,geneinfo.filtered$geneId)
# update count.df to only genes with 1-1 mapping between their ensembl ID and hgnc symbols
gene.names = geneinfo.filtered$hgnc_symbol[na.omit(match(gene.id,geneinfo.filtered$geneId))]
anyNA(gene.names)
all(!duplicated(gene.names))
which(gene.names == "")
sort(gene.names)[1:10]
head(sort(gene.names))
tail(sort(gene.names))
match(geneinfo$geneId, gene.id)
all(match(geneinfo$geneId, gene.id) == sort(match(geneinfo$geneId, gene.id)))
# Count.df has 60488 rows:
# - the last 5 rows are QC statistics, the others are counts for genes.
# Match the rows of count.df to the rows of geneinfo by ensembl ID:
# - 60483 gene ensembl ID in the data
# - all matched to those in the gene info matrix in the same order
count.df = count.df[match(geneinfo$geneId, gene.id),] # 60483 * 472
match(geneinfo.filtered$geneId, gene.id)
anyNA(match(geneinfo.filtered$geneId, gene.id))
count.df.filtered = count.df[match(geneinfo.filtered$geneId, gene.id),]
rm(gene.names)
rm(count.df.filtered)
# update count.df to only genes with 1-1 mapping between their ensembl ID and hgnc symbols
count.df.filtered = cbind(geneinfo.filtered$geneId, geneinfo.filtered$hgnc_symbol,
count.df[match(geneinfo.filtered$geneId, gene.id),])
count.df.filtered[1:5,1:5]
# update count.df to only genes with 1-1 mapping between their ensembl ID and hgnc symbols
count.df.filtered = cbind(ensembl_ID = geneinfo.filtered$geneId,
hgnc_symbol = geneinfo.filtered$hgnc_symbol,
count.df[match(geneinfo.filtered$geneId, gene.id),])
count.df.filtered[1:5,1:5]
# Save the count matrix
write.table(count.df.filtered, "count_matrix.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
rm(count.df)
rm(geneinfo.filtered)
rownames(count.df.filtered) = NULL
count.df.filtered[1:5,1:5]
unique(duplicated(count.df.filtered$ensembl_ID))
unique(duplicated(count.df.filtered$hgnc_symbol))
head(GeneLengths.Mat)
length(unique(GeneLengths.Mat$Gencode.ID))
match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Ensembl.ID)
head(count.df.filtered$ensembl_ID)
str(count.df.filtered)
count.df.filtered$ensembl_ID = as.character(count.df.filtered$ensembl_ID)
count.df.filtered$hgnc_symbol = as.character(count.df.filtered$hgnc_symbol)
str(count.df.filtered)
str(GeneLengths.Mat)
match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Ensembl.ID)
count.df.filtered$ensembl_ID
count.df.filtered$ensembl_ID[1:10]
GeneLengths.Mat$Ensembl.ID[1:10]
match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Gencode.ID)
geneLength = GeneLengths.Mat$Exonic[match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Gencode.ID)]
count = count.df.filtered
gene_length = geneLength
nrow(count)
length(gene_length)
count = count.df.filtered[,c(-1,-2)]
TPM = count / gene_length
TPM[1:3,1:3]
TPM.df = calculate_TPM(count.df.filtered[,c(-1,-2)], geneLength, 1:nrows(count.df.filtered))
calculate_TPM = function(count, gene_length, indices) {
if (nrow(count) != length(gene_length)) stop("Number of rows of the count matrix does not match gene lengths!")
TPM = count / gene_length
t(t(TPM)*1e6/colSums(TPM[indices, ]))
}
geneLength = GeneLengths.Mat$Exonic[match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Gencode.ID)]
TPM.df = calculate_TPM(count.df.filtered[,c(-1,-2)], geneLength, 1:nrows(count.df.filtered))
nrow(count.df.filtered)
calculate_TPM = function(count, gene_length, indices) {
if (nrow(count) != length(gene_length)) stop("Number of rows of the count matrix does not match gene lengths!")
TPM = count / gene_length
t(t(TPM)*1e6/colSums(TPM[indices, ]))
}
geneLength = GeneLengths.Mat$Exonic[match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Gencode.ID)]
TPM.df = calculate_TPM(count.df.filtered[,c(-1,-2)], geneLength, 1:nrow(count.df.filtered))
TPM.df[1:5,1:5]
rownames(TPM.df)
rownames(TPM.df) = count.df.filtered$hgnc_symbol
TPM.df[1:5,1:5]
TPM.df[1:3,1:3]
TPM.df[1:3,1:5]
TPM.df[1:5,1:3]
str(TPM.df)
write.csv(TPM.df, "count_matrix.csv", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.csv(TPM.df, "count_matrix.csv")
write.csv(TPM.df, "tpm_matrix.csv")
write.table(TPM.df, "tpm_matrix.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names = TRUE)
# LM22 signature matrix
LM22 = read.table("../../_reference/LM22.txt",header = TRUE)
# LM22 signature matrix
LM22 = read.table("../../_reference/LM22.txt",header = TRUE, sep = "\t", as.is = TRUE)
LM22[1:5,1:5]
# MTG signature matrix
MTG_sigmat = load("../../_reference/signature_MTG.rds")
# MTG signature matrix
MTG_sigmat = readRDS("../../_reference/signature_MTG.rds")
str(MTG_sigmat)
dim(MTG_sigmat$SIG)
head(MTG_sigmat$SIG)
# MTG signature matrix
MTG_sigmat = readRDS("../../_reference/signature_MTG.rds")$SIG
head(MTG_sigmat) # 694*6
# LM22 signature matrix
LM22_sigmat = read.table("../../_reference/LM22.txt",header = TRUE, sep = "\t", as.is = TRUE)
LM22_sigmat[1:5,1:5] # 547*23
head(MTG_sigmat) # 694*6
rownames(count.df.filtered)
rm(LM22)
match(LM22_sigmat$Gene.symbol, count.df.filtered$hgnc_symbol)
reference.genes.id = na.omit(match(LM22_sigmat$Gene.symbol, count.df.filtered$hgnc_symbol))
rm(TPM)
rm(TPM.df)
SKCM_TPM = calculate_TPM(count.df.filtered[,c(-1,-2)], geneLength, reference.genes.id)
dim(SKCM_TPM) # 35295 * 472
calculate_TPM = function(count, gene_length, indices) {
if (nrow(count) != length(gene_length)) stop("Number of rows of the count matrix does not match gene lengths!")
TPM = count / gene_length
t(t(TPM)*1e6/colSums(TPM[indices, ]))
}
geneLength = GeneLengths.Mat$Exonic[match(count.df.filtered$ensembl_ID, GeneLengths.Mat$Gencode.ID)]
# 535 genes in common between the LM22 matrix and our count matrix
reference.genes.id = na.omit(match(LM22_sigmat$Gene.symbol, count.df.filtered$hgnc_symbol))
SKCM_TPM = calculate_TPM(count.df.filtered[,c(-1,-2)], geneLength, 1:nrow(count.df.filtered))
rownames(SKCM_TPM) = count.df.filtered$hgnc_symbol
dim(SKCM_TPM) # 35295 * 472
SKCM_TPM[1:5,1:3]
count.df = read.csv("raw_counts.csv", header = TRUE, row.names = 1)
count.df[1:5,1:5]
# sanity check
anyNA(count.df)
dim(count.df) # 60488 * 472
# Count.df has 60488 rows:
# - the last 5 rows are QC statistics, the others are counts for genes.
# Match the rows of count.df to the rows of geneinfo by ensembl ID:
# - 60483 gene ensembl ID in the data
# - all matched to those in the gene info matrix in the same order
count.df = count.df[match(geneinfo$geneId, gene.id),] # 60483 * 472
dim(count.df)
gene.id = row.names(count.df)
# save the raw matrix of count
write.csv(count.df, "raw_counts.csv")
SKCM_TPM = calculate_TPM(count.df.filtered[,c(-1,-2)], geneLength, reference.genes.id)
count.df.refgenes = count.df.filtered[reference.genes.id,]
count.df.refgenes[1:5,1:5]
write.table(count.df.refgenes, "count_matrix_reference_genes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
rm(MTG_sigmat)
geneLength = GeneLengths.Mat$Exonic[match(count.df.refgenes$ensembl_ID, GeneLengths.Mat$Gencode.ID)]
count.df.refgenes[1:5,c(-1,-2)]
rm(count)
nrow(count.df.refgenes)
length(geneLength)
SKCM_TPM = calculate_TPM(count.df.refgenes[,c(-1,-2)], geneLength, 1:nrow(count.df.refgenes))
rownames(SKCM_TPM) = count.df.refgenes$hgnc_symbol
dim(SKCM_TPM) # 35295 * 472
SKCM_TPM[1:5,1:3]
icedt_output_file =  file.path("SCZ_ICeDT_output.rds")
signature_matrix = as.matrix(LM22_sigmat)
icedt_output_file =  "SKCM_ICeDT_output.rds"
if (!file.exists(icedt_output_file)) {
set.seed(1234)
icedt_output = ICeDT::ICeDT(
Y = SKCM_TPM,
Z = signature_matrix,
tumorPurity = rep(0, ncol(SKCM_TPM)),
refVar = NULL)
# save to ICeDT cellular frequency RDS file
saveRDS(icedt_output, icedt_output_file)
} else {
icedt_output = readRDS(icedt_output_file)
}
install.packages("ICeDT")
install.packages("https://github.com/Sun-lab/ICeDT.git")
library(devtools)
githubinstall("ICeDT")
library(githubinstall)
install.packages("githubinstall")
library(githubinstall)
githubinstall("ICeDT")
install_github("sunway1999/ICeDT")
install_github("Sun-lab/ICeDT")
library(ICeDT)
if (!file.exists(icedt_output_file)) {
set.seed(1234)
icedt_output = ICeDT::ICeDT(
Y = SKCM_TPM,
Z = signature_matrix,
tumorPurity = rep(0, ncol(SKCM_TPM)),
refVar = NULL)
# save to ICeDT cellular frequency RDS file
saveRDS(icedt_output, icedt_output_file)
} else {
icedt_output = readRDS(icedt_output_file)
}
dim(Y)
dim(SKCM_TPM)
dim(signature_matrix)
match(rownames(SKCM_TPM), LM22_sigmat$Gene.symbol)
signature_matrix = as.matrix(LM22_sigmat[match(rownames(SKCM_TPM), LM22_sigmat$Gene.symbol),])
dim(signature_matrix)
dim(SKCM_TPM)
if (!file.exists(icedt_output_file)) {
set.seed(1234)
icedt_output = ICeDT::ICeDT(
Y = SKCM_TPM,
Z = signature_matrix,
tumorPurity = rep(0, ncol(SKCM_TPM)),
refVar = NULL)
# save to ICeDT cellular frequency RDS file
saveRDS(icedt_output, icedt_output_file)
} else {
icedt_output = readRDS(icedt_output_file)
}
row.names(SKCM_TPM)
row.names(signature_matrix)
signature_matrix[1:5,1:5]
signature_matrix = as.matrix(LM22_sigmat[match(rownames(SKCM_TPM), LM22_sigmat$Gene.symbol),-1])
signature_matrix[1:5,1:5]
rownames(signature_matrix) = rownames(SKCM_TPM)
if (!file.exists(icedt_output_file)) {
set.seed(1234)
icedt_output = ICeDT::ICeDT(
Y = SKCM_TPM,
Z = signature_matrix,
tumorPurity = rep(0, ncol(SKCM_TPM)),
refVar = NULL)
# save to ICeDT cellular frequency RDS file
saveRDS(icedt_output, icedt_output_file)
} else {
icedt_output = readRDS(icedt_output_file)
}
icedt_output_file
if (!file.exists(icedt_output_file)) {
set.seed(34548)
icedt_output = ICeDT::ICeDT(
Y = SKCM_TPM,
Z = signature_matrix,
tumorPurity = NULL,
refVar = NULL)
# save to ICeDT cellular frequency RDS file
saveRDS(icedt_output, icedt_output_file)
} else {
icedt_output = readRDS(icedt_output_file)
}
geneSymbol_and_observed_TPM[1:5,1:5]
geneSymbol_and_observed_TPM = cbind(geneSymbol = count.df.refgenes$hgnc_symbol, SKCM_TPM)
geneSymbol_and_observed_TPM[1:5,1:5]
dim(geneSymbol_and_observed_TPM)
dim(signature_matrix )
signature_matrix[1:5,1:5]
geneSymbol_and_signature_matrix = cbind(geneSymbol = count.df.refgenes$hgnc_symbol, signature_matrix)
geneSymbol_and_signature_matrix[1:5,1:5]
signature_gene_file = "CIBERSORT_input_signature_gene_SKCM.txt"
mixture_file = "CIBERSORT_input_observed_TPM_SKCM.txt"
write.table(geneSymbol_and_observed_TPM,
file = mixture_file,
quote = FALSE,
row.names = FALSE,
sep="\t")
write.table(geneSymbol_and_signature_matrix,
file = signature_gene_file,
quote = FALSE,
row.names = FALSE,
sep="\t")
head(sampleinfo)
